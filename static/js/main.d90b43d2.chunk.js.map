{"version":3,"sources":["store/index.ts","components/PostsList/PostsList.tsx","api/posts.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["LOAD_POSTS","LOAD_USERS","SET_USER_ID","SET_POST_ID","LOAD_SELECTED_POST","defaultState","posts","users","selectedUserId","selectedPostId","selectedPost","id","userId","title","body","selectPostIdAction","value","type","store","createStore","state","action","composeWithDevTools","applyMiddleware","thunk","PostsList","dispatch","useDispatch","useSelector","className","map","post","onClick","getUsers","fetch","then","response","json","getPosts","url","getSelectedPost","getCommentsOfPost","a","deleteComment","method","createComment","postId","name","email","headers","JSON","stringify","NewCommentForm","getPostComments","useState","setBody","setName","setEmail","createCommentForPost","event","preventDefault","onSubmit","placeholder","onChange","target","required","PostDetails","commentsOfPost","setComments","isCommentsHidden","setIsCommentsHidden","comments","removeComment","useEffect","length","comment","App","isStart","setIsStart","htmlFor","user","username","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d90b43d2.chunk.js","sourcesContent":["import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\n\nconst LOAD_POSTS = 'LOAD_POSTS';\nconst LOAD_USERS = 'LOAD_USERS';\nconst SET_USER_ID = 'SET_USER_ID';\nconst SET_POST_ID = 'SET_POST_ID';\nconst LOAD_SELECTED_POST = 'LOAD_SELECTED_POST';\n\nexport type State = {\n  posts: Post[],\n  users: User[],\n  selectedUserId: 0,\n  selectedPostId: 0,\n  selectedPost: Post,\n};\n\nconst defaultState: State = {\n  posts: [],\n  users: [],\n  selectedUserId: 0,\n  selectedPostId: 0,\n  selectedPost: {\n    id: 0,\n    userId: 0,\n    title: '',\n    body: '',\n  },\n};\n\nconst reducer = (state = defaultState, action: any): State => {\n  switch (action.type) {\n    case LOAD_POSTS:\n      return { ...state, posts: [...action.value] };\n\n    case LOAD_SELECTED_POST:\n      return { ...state, selectedPost: { ...action.value } };\n\n    case LOAD_USERS:\n      return { ...state, users: [...action.value] };\n\n    case SET_POST_ID:\n      return { ...state, selectedPostId: action.value };\n\n    case SET_USER_ID:\n      return { ...state, selectedUserId: action.value };\n\n    default:\n      return { ...state };\n  }\n};\n\nexport const addPostsAction = (value: Post[]) => ({ type: LOAD_POSTS, value });\nexport const addUsersAction = (value: User[]) => ({ type: LOAD_USERS, value });\nexport const loadSelectedPostAction = (value: Post) => ({ type: LOAD_SELECTED_POST, value });\nexport const selectUserIdAction = (value: number) => ({ type: SET_USER_ID, value });\nexport const selectPostIdAction = (value: number) => ({ type: SET_POST_ID, value });\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectPostIdAction, State } from '../../store';\nimport './PostsList.scss';\n\nexport const PostsList: React.FC = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector((state: State) => state.posts);\n  const selectedPostId = useSelector((state: State) => state.selectedPostId);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>{`User #${post.userId}:`}</b>\n              {post.title}\n            </div>\n            {selectedPostId === post.id ? (\n              <button\n                onClick={() => dispatch(selectPostIdAction(0))}\n                type=\"button\"\n                className=\"PostsList__button button\"\n              >\n                Close\n              </button>\n            )\n              : (\n                <button\n                  onClick={() => {\n                    dispatch(selectPostIdAction(post.id));\n                  }}\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                >\n                  Open\n                </button>\n              )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { addPostsAction, addUsersAction, loadSelectedPostAction } from '../store';\n\nexport function getUsers() {\n  const url = 'https://mate.academy/students-api/users/';\n\n  return function (dispatch: any) {\n    fetch(url)\n      .then(response => response.json())\n      .then(json => dispatch(addUsersAction(json)));\n  };\n}\n\nexport function getPosts(userId: number) {\n  let url = 'https://mate.academy/students-api/posts';\n\n  if (userId) {\n    url += `?userId=${userId}`;\n  }\n\n  return function (dispatch: any) {\n    fetch(url)\n      .then(response => response.json())\n      .then(json => dispatch(addPostsAction(json)));\n  };\n}\n\nexport function getSelectedPost(id: number) {\n  return function (dispatch: any) {\n    fetch(`https://mate.academy/students-api/posts/${id}`)\n      .then(response => response.json())\n      .then(json => dispatch(loadSelectedPostAction(json)));\n  };\n}\n","/* eslint-disable @typescript-eslint/quotes */\nimport { Comment } from '../types/Comment';\n\nexport async function getCommentsOfPost(id: number): Promise<Comment[]> {\n  const response = await fetch(`https://mate.academy/students-api/comments?postId=${id}`);\n\n  return response.json();\n}\n\nexport async function deleteComment(id: number): Promise<Comment> {\n  const response = await fetch(`https://mate.academy/students-api/comments/${id}`, { method: 'DELETE' });\n\n  return response.json();\n}\n\nexport async function createComment(\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n): Promise<Comment> {\n  const response = await fetch('https://mate.academy/students-api/comments/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n\n  return response.json();\n}\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { createComment } from '../../api/comments';\nimport { State } from '../../store';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  getPostComments: () => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ getPostComments }) => {\n  const [body, setBody] = useState('');\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n\n  const selectedPostId = useSelector((state: State) => state.selectedPostId);\n\n  const createCommentForPost = async (event: React.FormEvent) => {\n    event.preventDefault();\n    await createComment(selectedPostId, name, email, body);\n    getPostComments();\n    setBody('');\n    setEmail('');\n    setName('');\n  };\n\n  return (\n    <form\n      onSubmit={createCommentForPost}\n      className=\"NewCommentForm\"\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => {\n            setBody(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCommentsOfPost, deleteComment } from '../../api/comments';\nimport { getSelectedPost } from '../../api/posts';\nimport { Comment } from '../../types/Comment';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { State } from '../../store';\n\nexport const PostDetails: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const selectedPost = useSelector((state: State) => state.selectedPost);\n\n  const selectedPostId = useSelector((state: State) => state.selectedPostId);\n\n  const [commentsOfPost, setComments] = useState<Comment[]>([{\n    id: 0,\n    postId: 0,\n    name: '',\n    email: '',\n    body: '',\n  }]);\n\n  const [isCommentsHidden, setIsCommentsHidden] = useState(false);\n\n  const getPostComments = async () => {\n    const comments = await getCommentsOfPost(selectedPostId);\n\n    setComments(comments);\n  };\n\n  const removeComment = async (id: number) => {\n    await deleteComment(id);\n\n    await getPostComments();\n  };\n\n  useEffect(() => {\n    getPostComments();\n    dispatch(getSelectedPost(selectedPostId));\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{selectedPost.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {commentsOfPost.length\n          && (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setIsCommentsHidden(!isCommentsHidden)}\n            >\n              {!isCommentsHidden ? `Hide ${commentsOfPost.length} comments` : 'Show comments'}\n            </button>\n          )}\n\n        {!isCommentsHidden && (\n          <ul className=\"PostDetails__list\">\n            {commentsOfPost.map(comment => (\n              <li key={comment.id} className=\"PostDetails__list-item\">\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => {\n                    removeComment(comment.id);\n                  }}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            getPostComments={getPostComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import './App.scss';\nimport './styles/general.scss';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PostsList } from './components/PostsList';\nimport { selectUserIdAction, State } from './store';\nimport { getPosts, getUsers } from './api/posts';\nimport { PostDetails } from './components/PostDetails';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const users = useSelector((state: State) => state.users);\n\n  const selectedUserId = useSelector((state: State) => state.selectedUserId);\n\n  const selectedPostId = useSelector((state: State) => state.selectedPostId);\n\n  const [isStart, setIsStart] = useState(false);\n\n  const selectUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(selectUserIdAction(+event.target.value));\n  };\n\n  const startApp = () => {\n    setIsStart(true);\n    dispatch(getPosts(0));\n    dispatch(getUsers());\n  };\n\n  useEffect(() => {\n    dispatch(getPosts(selectedUserId));\n  }, [selectedUserId]);\n\n  return (isStart ? (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"select\">\n          Select a user: &nbsp;\n\n          <select\n            id=\"select\"\n            className=\"App__user-selector\"\n            onChange={selectUser}\n          >\n            <option value={0}>All users</option>\n            {users.map(user => (\n              <option key={user.id} value={user.id}>{`${user.name} ${user.username}`}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0 && (\n            <PostDetails />\n          )}\n        </div>\n      </main>\n    </div>\n  ) : (\n    <button\n      className=\"start__button\"\n      type=\"button\"\n      onClick={startApp}\n    >\n      Start\n    </button>\n  ));\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}