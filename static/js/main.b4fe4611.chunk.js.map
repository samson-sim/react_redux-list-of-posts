{"version":3,"sources":["store/index.ts","components/PostsList/PostsList.tsx","api/posts.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["LOAD_POSTS","LOAD_USERS","SET_USER_ID","SET_POST_ID","LOAD_SELECTED_POST","defaultState","posts","users","selectedUserId","selectedPostId","selectedPost","id","userId","title","body","selectPostIdAction","payLoad","type","store","createStore","state","action","composeWithDevTools","applyMiddleware","thunk","PostsList","dispatch","useDispatch","className","map","post","onClick","getUsers","fetch","then","response","json","getPosts","url","getSelectedPost","deleteComment","method","ok","Error","createComment","postId","name","email","a","headers","JSON","stringify","NewCommentForm","getPostComments","useState","setBody","setName","setEmail","createCommentForPost","event","preventDefault","onSubmit","placeholder","value","onChange","target","required","PostDetails","useSelector","commentsOfPost","setComments","isCommentsHidden","setIsCommentsHidden","comments","removeComment","useEffect","length","comment","App","isStart","setIsStart","console","log","htmlFor","user","username","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b4fe4611.chunk.js","sourcesContent":["import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\n\nconst LOAD_POSTS = 'LOAD_POSTS';\nconst LOAD_USERS = 'LOAD_USERS';\nconst SET_USER_ID = 'SET_USER_ID';\nconst SET_POST_ID = 'SET_POST_ID';\nconst LOAD_SELECTED_POST = 'LOAD_SELECTED_POST';\n\nexport type State = {\n  posts: Post[],\n  users: User[],\n  selectedUserId: 0,\n  selectedPostId: 0,\n  selectedPost: Post,\n};\n\nconst defaultState: State = {\n  posts: [],\n  users: [],\n  selectedUserId: 0,\n  selectedPostId: 0,\n  selectedPost: {\n    id: 0,\n    userId: 0,\n    title: '',\n    body: '',\n  },\n};\n\nconst reducer = (state = defaultState, action: any): State => {\n  switch (action.type) {\n    case LOAD_POSTS:\n      return {\n        ...state,\n        posts: [...action.payLoad],\n      };\n\n    case LOAD_SELECTED_POST:\n      return { ...state, selectedPost: { ...action.payLoad } };\n\n    case LOAD_USERS:\n      return {\n        ...state,\n        users: [...action.payLoad],\n      };\n\n    case SET_POST_ID:\n      return { ...state, selectedPostId: action.payLoad };\n\n    case SET_USER_ID:\n      return { ...state, selectedUserId: action.payLoad };\n\n    default:\n      return { ...state };\n  }\n};\n\nexport const addPostsAction = (payLoad: Post[]) => ({ type: LOAD_POSTS, payLoad });\nexport const addUsersAction = (payLoad: User[]) => ({ type: LOAD_USERS, payLoad });\nexport const loadSelectedPostAction = (payLoad: Post) => ({ type: LOAD_SELECTED_POST, payLoad });\nexport const selectUserIdAction = (payLoad: number) => ({ type: SET_USER_ID, payLoad });\nexport const selectPostIdAction = (payLoad: number) => ({ type: SET_POST_ID, payLoad });\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { selectPostIdAction } from '../../store';\nimport { Post } from '../../types/Post';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId: number,\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, selectedPostId }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>{`User #${post.userId}:`}</b>\n              {post.title}\n            </div>\n            {selectedPostId === post.id ? (\n              <button\n                onClick={() => dispatch(selectPostIdAction(0))}\n                type=\"button\"\n                className=\"PostsList__button button\"\n              >\n                Close\n              </button>\n            )\n              : (\n                <button\n                  onClick={() => {\n                    dispatch(selectPostIdAction(post.id));\n                  }}\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                >\n                  Open\n                </button>\n              )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { addPostsAction, addUsersAction, loadSelectedPostAction } from '../store';\n\nexport function getUsers() {\n  const url = 'https://mate.academy/students-api/users/';\n\n  return function (dispatch: any) {\n    fetch(url)\n      .then(response => response.json())\n      .then(json => dispatch(addUsersAction(json)));\n  };\n}\n\nexport function getPosts(userId: number) {\n  let url = 'https://mate.academy/students-api/posts';\n\n  if (userId) {\n    url += `?userId=${userId}`;\n  }\n\n  return function (dispatch: any) {\n    fetch(url)\n      .then(response => response.json())\n      .then(json => dispatch(addPostsAction(json)));\n  };\n}\n\nexport function getSelectedPost(id: number) {\n  return function (dispatch: any) {\n    fetch(`https://mate.academy/students-api/posts/${id}`)\n      .then(response => response.json())\n      .then(json => dispatch(loadSelectedPostAction(json)));\n  };\n}\n","/* eslint-disable @typescript-eslint/quotes */\nimport { Comment } from '../types/Comment';\n\nexport function getCommentsOfPost(id: number): Promise<Comment[]> {\n  return fetch(`https://mate.academy/students-api/comments?postId=${id}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('error');\n      }\n\n      return response.json();\n    });\n}\n\nexport function deleteComment(id: number): Promise<Comment> {\n  return fetch(`https://mate.academy/students-api/comments/${id}`, { method: 'DELETE' })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('error');\n      }\n\n      return response.json();\n    });\n}\n\nexport async function createComment(\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n): Promise<Comment> {\n  const response = await fetch('https://mate.academy/students-api/comments/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n\n  return response.json();\n}\n","import React, { useState } from 'react';\nimport { createComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  getPostComments: () => void;\n  postId: number;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ getPostComments, postId }) => {\n  const [body, setBody] = useState('');\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n\n  const createCommentForPost = async (event: React.FormEvent) => {\n    event.preventDefault();\n    await createComment(postId, name, email, body);\n    getPostComments();\n    setBody('');\n    setEmail('');\n    setName('');\n  };\n\n  return (\n    <form\n      onSubmit={createCommentForPost}\n      className=\"NewCommentForm\"\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => {\n            setBody(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCommentsOfPost, deleteComment } from '../../api/comments';\nimport { getSelectedPost } from '../../api/posts';\nimport { Comment } from '../../types/Comment';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { State } from '../../store';\n\ntype Props = {\n  selectedPostId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const selectedPost = useSelector((state: State) => state.selectedPost);\n  const dispatch = useDispatch();\n  const [commentsOfPost, setComments] = useState<Comment[]>([{\n    id: 0,\n    postId: 0,\n    name: '',\n    email: '',\n    body: '',\n  }]);\n\n  const [isCommentsHidden, setIsCommentsHidden] = useState(false);\n\n  const getPostComments = async () => {\n    const comments = await getCommentsOfPost(selectedPostId);\n\n    setComments(comments);\n  };\n\n  const removeComment = async (id: number) => {\n    await deleteComment(id);\n\n    await getPostComments();\n  };\n\n  useEffect(() => {\n    getPostComments();\n    dispatch(getSelectedPost(selectedPostId));\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{selectedPost.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {commentsOfPost.length\n          && (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setIsCommentsHidden(!isCommentsHidden)}\n            >\n              {!isCommentsHidden ? `Hide ${commentsOfPost.length} comments` : 'Show comments'}\n            </button>\n          )}\n\n        {!isCommentsHidden && (\n          <ul className=\"PostDetails__list\">\n            {commentsOfPost.map(comment => (\n              <li key={comment.id} className=\"PostDetails__list-item\">\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => {\n                    removeComment(comment.id);\n                  }}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            getPostComments={getPostComments}\n            postId={selectedPostId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import './App.scss';\nimport './styles/general.scss';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PostsList } from './components/PostsList';\nimport { selectUserIdAction, State } from './store';\nimport { getPosts, getUsers } from './api/posts';\nimport { PostDetails } from './components/PostDetails';\n// import { PostDetails } from './components/PostDetails';\n// import { getPosts, getUsers } from './api/posts';\n// import { User } from './types/User';\n// import { Post } from './types/Post';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector((state: State) => state.posts);\n  const users = useSelector((state: State) => state.users);\n  const selectedUserId = useSelector((state: State) => state.selectedUserId);\n  const selectedPostId = useSelector((state: State) => state.selectedPostId);\n  const [isStart, setIsStart] = useState(false);\n\n  // eslint-disable-next-line no-console\n  console.log(posts, users);\n\n  return (isStart ? (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"select\">\n          Select a user: &nbsp;\n\n          <select\n            id=\"select\"\n            className=\"App__user-selector\"\n            onChange={(event) => {\n              dispatch(selectUserIdAction(+event.target.value));\n              dispatch(getPosts(selectedUserId));\n            }}\n          >\n            <option value={0}>All users</option>\n            {users.map(user => (\n              <option key={user.id} value={user.id}>{`${user.name} ${user.username}`}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0 && (\n            <PostDetails selectedPostId={selectedPostId} />\n          )}\n        </div>\n      </main>\n    </div>\n  ) : (\n    <button\n      className=\"start__button\"\n      type=\"button\"\n      onClick={() => {\n        setIsStart(true);\n        dispatch(getPosts(selectedUserId));\n        dispatch(getUsers());\n      }}\n    >\n      Start\n    </button>\n  ));\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}